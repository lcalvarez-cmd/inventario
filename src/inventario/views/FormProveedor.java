package inventario.views;

import java.sql.ResultSet;

import inventario.config.Conexion;
import inventario.modelo.DatosContacto;
import inventario.modelo.Proveedor;
import inventario.tabla.CeldaRenderer;
import inventario.tabla.EncabezadoRenderer;
import inventario.tabla.TablaModelo;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class FormProveedor extends javax.swing.JFrame {
    DefaultTableModel model;

    ArrayList<Proveedor> listProveedores;
    private JComboBox combo;
    private JTextField tf;

    /**
     * Creates new form FormProveedor
     */
    public FormProveedor() {
        initComponents();
        setLocationRelativeTo(null);
        String[] tituos = {"ID_PROVEEDOR", "NIT", "NOMBRE", "DIRECCIÓN", "TELEFONO", "PRODUCTOS"};

        txtIdProveedor.setVisible(false);
        model = new DefaultTableModel(null, tituos);
        tblProveedores.setModel(model);
        cargarDatos();
//        iniciarTabla(); //metodo que podria ir mejor para visibilizar los datos
        //ocultamos la columna 0 id_proveedor
        tblProveedores.removeColumn(tblProveedores.getColumnModel().getColumn(0));
        limpiar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnEditar = new javax.swing.JButton();
        txtIdProveedor = new javax.swing.JTextField();
        btnVolver = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProveedores = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtDireccionUno = new javax.swing.JTextField();
        txtTelefonoUno = new javax.swing.JTextField();
        txtDireccionDos = new javax.swing.JTextField();
        txtTelefonoDos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNit = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setText("Dirección 1:");

        jLabel6.setText("Telefono 2:");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel7.setText("Dirección 2:");

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnVolver.setText("volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        tblProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProveedoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProveedores);

        jLabel1.setText("Agregar nuevo proveedor:");

        jLabel2.setText("Nombre:");

        jLabel3.setText("Nit");

        txtTelefonoUno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoUnoKeyTyped(evt);
            }
        });

        txtTelefonoDos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoDosKeyTyped(evt);
            }
        });

        jLabel4.setText("Telefono 1:");

        jLabel10.setText("Información de contacto:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(75, 75, 75))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnVolver)
                                .addGap(93, 93, 93)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(txtNit))
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTelefonoDos, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(txtTelefonoUno)
                                    .addComponent(txtDireccionUno)
                                    .addComponent(txtDireccionDos)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(26, 26, 26)
                                .addComponent(txtIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(btnAgregar)
                        .addGap(91, 91, 91)
                        .addComponent(btnCancelar)
                        .addGap(98, 98, 98)
                        .addComponent(btnEditar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefonoUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDireccionUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefonoDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDireccionDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnEditar)
                    .addComponent(btnAgregar))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVolver)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        Conexion objConexion = new Conexion();
        Proveedor objProveedor = recuperarDatosGUI();
        try {
            ResultSet respuesta = objConexion.consultarRegistro("SELECT * FROM proveedor WHERE id_proveedor = "+objProveedor.getId_proveedor());
            String nit = "";
            while(respuesta.next()){// recupero el nit actual del id del proveedor
                //para ver si cambia, si cambia tengo que verificar que este disponible
                //si no cambia entonces no hago nada
                nit = respuesta.getString("nit");
            }
            System.out.println("nit: "+nit);
            if (!objProveedor.getNit().equals(nit)) {// si el nit se cambia verificamos que este disponible
                ResultSet nitbd = objConexion.consultarRegistro("SELECT * FROM proveedor WHERE nit = '"+objProveedor.getNit()+"'");
                if(nitbd.isBeforeFirst()){//entonces si hay un nit ya registrado con ese nit nuevo
                    JOptionPane.showMessageDialog(null, "Este Nit ya se encuentra registrado");
                }
            }else{
                String sentencia = String.format("UPDATE proveedor SET nit = '%s', nombre = '%s' where id_proveedor = %d" ,objProveedor.getNit(), objProveedor.getNombre(),objProveedor.getId_proveedor());
                objConexion.ejecutarSentenciSQL(sentencia);
                this.cargarDatos();
            }
            objConexion.desconectar();
        } catch (Exception e) {
            System.out.println("Error: editando proveedor "+e);
        }
        
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        Inventario vistaIntenvario = new Inventario();//creo un objeto de la sigte vista
        vistaIntenvario.setVisible(true);//la hago visible
        setVisible(false);//oculto la vista de login
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        Conexion objConexion = new Conexion();
        Proveedor objProveedor = recuperarDatosGUI();
        try {
            //verificamos que el nit ya no este registrado
            ResultSet respuesta = objConexion.consultarRegistro("Select * from proveedor where nit = '" + objProveedor.getNit() + "'");
            if (!respuesta.isBeforeFirst()) {//si este nit no esta en la bd
                String sentenciauno = String.format("INSERT INTO proveedor (nombre,nit) VALUES ('%s','%s')", objProveedor.getNombre(), objProveedor.getNit());
                objConexion.ejecutarSentenciSQL(sentenciauno);//se crea el proveedor 
                respuesta = objConexion.consultarRegistro("Select * from proveedor where nit = '" + objProveedor.getNit() + "'");
                long id_proveedor = 0;
                while (respuesta.next()) {//obtengo el id para agregar los datos el id
                    id_proveedor = Long.parseLong(respuesta.getString("id_proveedor"));
                }
                for (int i = 0; i < objProveedor.getDatos().size(); i++) {
                    String sentenciados = String.format("INSERT INTO datoscontacto (telefono,direccion,id_proveedor) VALUES ('%d','%s','%d')", objProveedor.getDatos().get(i).getTelefono(), objProveedor.getDatos().get(i).getDireccion(), id_proveedor);
                    objConexion.ejecutarSentenciSQL(sentenciados);
                }
            } else {
                JOptionPane.showMessageDialog(null, "NIT ya registrado");
            }
        } catch (Exception e) {
            System.out.println("Error al insertar proveedor");
        }
        cargarDatos();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tblProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProveedoresMouseClicked
        
        Proveedor proveedor = new Proveedor();
        Conexion objConexion = new Conexion();
        if (evt.getClickCount() == 1) {
            try {
                JTable receptor = (JTable) evt.getSource();
                //capturamos el id para buscar los datos ya que los telefonos direcciones y productos estan concatenados
                //dela columna 0 que esta oculta
                System.out.println("id:" + receptor.getModel().getValueAt(receptor.getSelectedRow(), 0)+":");
                String idS = (String) receptor.getModel().getValueAt(receptor.getSelectedRow(), 0);
                long id = Long.parseLong(idS);
                proveedor.setId_proveedor(id);
                ResultSet respuestaProveedor = objConexion.consultarRegistro("SELECT * FROM proveedor where id_proveedor = "+id);
                while(respuestaProveedor.next()){
                    proveedor.setId_proveedor(Long.parseLong(respuestaProveedor.getString("id_proveedor")));
                    proveedor.setNombre(respuestaProveedor.getString("nombre"));
                    proveedor.setNit(respuestaProveedor.getString("nit"));
                    
                    ResultSet respuestadatos = objConexion.consultarRegistro("SELECT * FROM datoscontacto where id_proveedor = " + id);
                    while (respuestadatos.next()) {//ahora recorremos uno a uno los datos que tenga ese proveedor 
                        DatosContacto datos = new DatosContacto();//llenamos los datos en el objeto
                        datos.setTelefono(Long.parseLong(respuestadatos.getString("telefono")));
                        datos.setDireccion(respuestadatos.getString("direccion"));
                        proveedor.agregarDatos(datos); // lo agregamos al objeto programador 
                    }
                }
                
//                System.out.println("Prveedor "+proveedor.getId_proveedor());
                txtIdProveedor.setText(""+proveedor.getId_proveedor());
                txtNit.setText(proveedor.getNit());
                txtNombre.setText(proveedor.getNombre());
                txtTelefonoUno.setText(""+proveedor.getDatos().get(1).getTelefono());
                txtDireccionUno.setText(proveedor.getDatos().get(1).getDireccion());
                txtTelefonoDos.setText(""+proveedor.getDatos().get(0).getTelefono());
                txtDireccionDos.setText(proveedor.getDatos().get(0).getDireccion());
                btnAgregar.setEnabled(false);
                btnEditar.setEnabled(true);
                btnCancelar.setEnabled(true);
            } catch (Exception e) {
                System.out.println("Error al querer montar los datos al dar click "+e);
            }
        }
        
        objConexion.desconectar();
    }//GEN-LAST:event_tblProveedoresMouseClicked

    //para solo recibir numeros
    private void txtTelefonoUnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoUnoKeyTyped
        char caracter = evt.getKeyChar();
        // Verificar si la tecla pulsada no es un digito
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b' /*corresponde a BACK_SPACE*/)) {
            evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_txtTelefonoUnoKeyTyped

//para solo recibir numeros
    private void txtTelefonoDosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoDosKeyTyped
        char caracter = evt.getKeyChar();
        // Verificar si la tecla pulsada no es un digito
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b' /*corresponde a BACK_SPACE*/)) {
            evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_txtTelefonoDosKeyTyped

    //con este medoto obtenemos cada txt que hay en la vista
    public Proveedor recuperarDatosGUI() {//recuperamso datos y los seteamos al objProveedor que
        //tiene una lista de obj de datos //ya que puede tener dos tel y dos dircc
        Proveedor objProveedor = new Proveedor();
        objProveedor.setId_proveedor(Long.parseLong(txtIdProveedor.getText()));
        objProveedor.setNombre(txtNombre.getText());
        objProveedor.setNit(txtNit.getText());
        
        DatosContacto datos = new DatosContacto();
        datos.setDireccion(txtDireccionUno.getText());
        if (!txtTelefonoUno.getText().isEmpty()) {//debo validar que este vacio, porque si no al convertir un vacio se genera error
            datos.setTelefono(Long.parseLong(txtTelefonoUno.getText()));
        }
        objProveedor.agregarDatos(datos);
        
        datos = new DatosContacto();
        datos.setDireccion(txtDireccionDos.getText());
        if (!txtTelefonoDos.getText().isEmpty()) {
            datos.setTelefono(Integer.parseInt(txtTelefonoDos.getText()));
        }
        objProveedor.agregarDatos(datos);
        return objProveedor;
    }
    
    public void cargarDatos() {
        while(model.getRowCount() > 0){//limpiar la tabla y se agrega
            model.removeRow(0);
        }
        Conexion objConexion = new Conexion();
        this.listProveedores = new ArrayList();
        try {
//            ResultSet respuesta = objConexion.consultarRegistro("SELECT p.id_proveedor, p.nombre, p.nit, d.telefono, d.direccion FROM proveedor AS p INNER JOIN datoscontacto AS d ON p.id_proveedor = d.id_proveedor");
            ResultSet respuestaProveedor = objConexion.consultarRegistro("SELECT * FROM proveedor ");
            
            while (respuestaProveedor.next()) {//recorremos uno a uno los proveedores
                Proveedor proveedor = new Proveedor();//los guardamos en este objeto
                proveedor.setId_proveedor(Long.parseLong(respuestaProveedor.getString("id_proveedor")));
                proveedor.setNombre(respuestaProveedor.getString("nombre"));
                proveedor.setNit(respuestaProveedor.getString("nit"));
                
                ResultSet respuestadatos = objConexion.consultarRegistro("SELECT * FROM datoscontacto where id_proveedor = " + Long.parseLong(respuestaProveedor.getString("id_proveedor")));
                String telefonos = "";
                String direcciones = "";
                while (respuestadatos.next()) {//ahora recorremos uno a uno los datos que tenga ese proveedor 
                    DatosContacto datos = new DatosContacto();//llenamos los datos en el objeto
                    datos.setTelefono(Long.parseLong(respuestadatos.getString("telefono")));
                    datos.setDireccion(respuestadatos.getString("direccion"));
                    proveedor.agregarDatos(datos); // lo agregamos al objeto programador 
                    //de esta manera el objeto programador ya tiene la lista con telefono y dirección
                    //aqui concatenamos para pasar los datos al Object [] y sea visible en la tabla

                    telefonos = respuestadatos.getString("telefono") + " \n " + telefonos;
                    direcciones = respuestadatos.getString("direccion") + " \n " + direcciones;
                }
                //agragamos cada proveedor a una lista de proveedores
                listProveedores.add(proveedor);
                Object[] objProveedor = {respuestaProveedor.getString("id_proveedor"), respuestaProveedor.getString("nit"), respuestaProveedor.getString("nombre"), direcciones, telefonos};//,respuesta.getString("direccion"),respuesta.getString("telefono")
                model.addRow(objProveedor);
            }
            

            //este for es para ver que si se guardaron correctamente los datos en la lista 
//            for (Proveedor lista : listProveedores) {
//                System.out.println(lista.toString());
//                for (int i = 0; i < lista.getDatos().size(); i++) {
//                    System.out.println("Dirección: " + lista.getDatos().get(i).getDireccion());                    
//                    System.out.println("Telefono: " + lista.getDatos().get(i).getTelefono());                    
//                }
//            }
            objConexion.desconectar();
        } catch (Exception e) {
            System.out.println("Se presento un error al cargar datos " + e);
        }
        
    }
    
     private void iniciarTabla() {
//        while(model.getRowCount() > 0){
//            model.removeRow(0);
//        }
        Conexion objConexion = new Conexion();
        this.listProveedores = new ArrayList();
        TablaModelo modelo = new TablaModelo();
        try {
            ResultSet respuestaProveedor = objConexion.consultarRegistro("SELECT * FROM proveedor ");
            
            while (respuestaProveedor.next()) {//recorremos uno a uno los proveedores
                Proveedor proveedor = new Proveedor();//los guardamos en este objeto
                proveedor.setId_proveedor(Long.parseLong(respuestaProveedor.getString("id_proveedor")));
                proveedor.setNombre(respuestaProveedor.getString("nombre"));
                proveedor.setNit(respuestaProveedor.getString("nit"));
                
                ResultSet respuestadatos = objConexion.consultarRegistro("SELECT * FROM datoscontacto where id_proveedor = " + Long.parseLong(respuestaProveedor.getString("id_proveedor")));
                String telefonos = "";
                String direcciones = "";
                while (respuestadatos.next()) {//ahora recorremos uno a uno los datos que tenga ese proveedor 
                    DatosContacto datos = new DatosContacto();//llenamos los datos en el objeto
                    datos.setTelefono(Long.parseLong(respuestadatos.getString("telefono")));
                    datos.setDireccion(respuestadatos.getString("direccion"));
                    proveedor.agregarDatos(datos); // lo agregamos al objeto programador 
                    //de esta manera el objeto programador ya tiene la lista con telefono y dirección
                    //aqui concatenamos para pasar los datos al Object [] y sea visible en la tabla
                    
                    telefonos = respuestadatos.getString("telefono") + " \n " + telefonos;
                    direcciones = respuestadatos.getString("direccion") + " \n " + direcciones;
                }
                
                //agragamos cada proveedor a una lista de proveedores
                listProveedores.add(proveedor);
                
            }
//            modelo.addProveedor(this.listProveedores.get(0));
//            modelo.addProveedor(this.listProveedores.get(0));
//            modelo.addProveedor(this.listProveedores.get(1));
            
            //este for es para ver que si se guardaron correctamente los datos en la lista 
            for (Proveedor objProveedor : listProveedores) {
//                System.out.println(objProveedor.toString());
                modelo.addProveedor(objProveedor);
                for (int i = 0; i < objProveedor.getDatos().size(); i++) {
                    System.out.println("Dirección: " + objProveedor.getDatos().get(i).getDireccion());                    
                }
                for (int i = 0; i < objProveedor.getDatos().size(); i++) {
                    System.out.println("Telefono: " + objProveedor.getDatos().get(i).getTelefono());                    
                }
            }
            
            
            tblProveedores.setModel(modelo);
            tblProveedores.getTableHeader().setDefaultRenderer(new EncabezadoRenderer());
            
            TableColumnModel tcm = tblProveedores.getColumnModel();
            for (int it = 0; it < tcm.getColumnCount(); it++) {
                tcm.getColumn(it).setCellRenderer(new CeldaRenderer());
            }
            
        } catch (Exception e) {
            System.out.println("Se presento un error al cargar datos " + e);
        }
    }

     public void limpiar(){
         txtIdProveedor.setText("");
         txtNombre.setText("");
         txtNit.setText("");
         txtTelefonoUno.setText("");
         txtTelefonoDos.setText("");
         txtDireccionUno.setText("");
         txtDireccionDos.setText("");
         btnAgregar.setEnabled(true);
         btnEditar.setEnabled(false);
         btnCancelar.setEnabled(true);
     }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormProveedor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProveedores;
    private javax.swing.JTextField txtDireccionDos;
    private javax.swing.JTextField txtDireccionUno;
    private javax.swing.JTextField txtIdProveedor;
    private javax.swing.JTextField txtNit;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefonoDos;
    private javax.swing.JTextField txtTelefonoUno;
    // End of variables declaration//GEN-END:variables
}
